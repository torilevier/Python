# -*- coding: utf-8 -*-
"""Lesson-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12EAp7Y-ySZ6lTh6YYd7E0SAEZhq1uVIn
"""

2+2+5

"""# Python Day 1
Here we go!

# Data types
"""

"this is a string"

"this is another string"

"this is a string" + "followed by another"

2+2

3.1415

True

False

"""# Variables"""

x = 5

x

x+3

x = 17

x+3

"""What is the type of something?"""

type(x)

type("this is a string")

type(3.1415)

type(True)

type(False)

type(type)

type(print)

"""# Executing cells"""

2+2

2+2
3*5

print(2+2)
print(3*5)

"""## Lists"""

numbers = [2, 3, 5, 7]

type(numbers)

numbers[1]

"""**Python uses zero-based indexing!!!**

Lists start at 0, not 1
"""

numbers[0]

numbers[4]

numbers

numbers.append(11)

numbers

for value in numbers:
    print("the value is", value)

"""This is called a loop, and for each item in that list, assign the variable "value" to that item in the list, and you can use that variable value for whatever is inside the loop. It knows it is inside the loop because it is indented and after the colon."""

for value in numbers:
    print("the value is", value)
    print("this line is in the loop")
print("no longer in the loop")

for n in numbers:
    print("the value is", n)

"""## Tuples

Just like lists! But can't be modified
"""

numbers = [2, 3, 5, 7]
my_tuple = (2, 3, 5, 7)

my_tuple[0]

numbers[0] = 17

numbers

my_tuple[0]=17

numbers

[1, True, "abc", 3.14]

"""Can have a list of an integer, a boolean, a string, and a float

# Dictionaries
"""

my_stuff = [1, True, "abc", 3.14]

my_stuff[3]

home_department = {
    "Greg": "RDS",
    "Seth": "DREAM Lab",
    "Jon": "DREAM Lab"
}

home_department["Greg"]

home_department["Kristi"]

home_department["Kristi"] = "DREAM Lab"

home_department

numbers

for value in numbers:
    print(value)

for key in home_department:
    print(key)

for key in home_department:
    print(key, home_department[key])

for key, value in home_department.items():
    print(key, "is in", value)

for x, y in home_department.items():
    print(x, "is in", y)

"""The purpose of adding ".items():" is to get two values assigned to two variables

## Functions
"""

print(42)

def my_computation(a, b):
    return a*b + 25

my_computation(3, 5)

my_computation(4, 6)

def my_computation(a, b):
    if a < b:
        result = a*b + 25
    else:
        result = 37 - a/b
    return result

"""This is a conditional statement, and this is how indentations work as well for what certain functions are under."""

my_computation(4, 6)

my_computation(6, 4)

"""# Operators"""

2+2

3*5 - 7

6/4

6//4

"""This is division where it rounds it down(?) to the nearest integer/ maybe just removes the decimal"""

2 ** 3

3 < 5

3 >= 5

3 < 5 and 4 < 6

8/3

8//3

"""# Getting help"""

type(help)

help(print)

help(numbers)

print(2, 3, True, "hello", sep="|")

unsorted_list = [3, 2, 11, 7]

unsorted_list.sort()

unsorted_list

